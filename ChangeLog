2009-10-12  Richard Dale  <richard.j.dale@gmail.com>

* Added more marshallers
* Amend the AnalogClock example to use SLOT() and SIGNAL() functions so that it
works for now, until the more QtScript-like slot/signal handling is implemented.

2009-10-11  Richard Dale  <richard.j.dale@gmail.com>

* Added a DEF_CONTAINER_MARSHALLER macro and defined a lot of QList and QVector
types to be marshalled

2009-10-10  Richard Dale  <richard.j.dale@gmail.com>

* The AnalogClock.qs example nearly works! Remaining problems are slots/signals
not being implemented, and 'this.height' not working as it needs to be 
'this.height()'. It isn't obvious how function calls and attribute accesses 
should be distinguished in QScriptClass in order to fix the attribute problem.
For signals/slots it might be possible to reuse the existing implementation,
but it seem that it expects instances to be embedded inside QVariants and 
wouldn't work with a QScriptSmoke::Instance embedded inside a QVariant.
* Fixed class loading problem where the Qt class and associated enums wasn't
being loaded at startup
* Improved overloaded method resolution so that it takes into account instances
of a class being the same or subclasses
* Moved all the type registration code into handlers.cpp

2009-10-09  Richard Dale  <richard.j.dale@gmail.com>

* Improve error messages over 'seg fault' when a method isn't found in the 
Smoke lib, or an overloaded method isn't resolved
* Allow a QtScript Date to be passed for any QDate, QDateTime or QDate arg
* Load all the classes from a Smoke lib at startup, as all the 'include()'
statements make the scripts look a bit clunky IMHO. But we should compare the
time and memory used to make sure it isn't a problem.
* Add an optional arguement to allow a script name to be given so that more 
than just '../test.qs' can be run. Create a test subdirectory for test scripts.
* Added some debug logging for accessing the C++ pointer to QScriptValue map
* Added a qScriptSmokeRegisterSequenceMetaType() function based on 
qScriptRegisterSequenceMetaType() but using marshaller and demarshaller 
functions that work with QScriptValues wrapped as smoke instances.
* Added a test marshaller for QVector<QPoint> to try the sequence marshaller,
and it does seem to do something useful. Where the metatypes should be declared
and so on needs more thought though.

2009-10-08  Richard Dale  <richard.j.dale@gmail.com>

* Virtual method overrides are now working. Added propertyFlags() methods to
QtScriptSmoke::MetaObject and Object classes that returns 
QScriptValue::ReadOnly. This makes it possible to distiguish between custom
qtscript functions and built in smoke methods.
* If an enum, such as QPainter.Antialiasing, is referenced, then return the
value directly, rather than returning a function to be evaluated.
* Once an argument type that can't be marshalled has been found, abandon the 
method call and throw an exception
* If an argument type has 'QList' or 'QVector' in it, assume it will match a
QtScript Array

2009-10-07  Richard Dale  <richard.j.dale@gmail.com>

* Argument and return types that can't be handled are no longer fatal, but are
QScript TypeError exceptions instead
* Add a singleton QtScriptSmoke::Global::Object which is the QScriptClass of 
Smoke instances
* Don't change the 'thisObject' in the MethodCall when a new instance has been
constructed, but assume a correct one has been set up in the context before, and
passed to the MethodCall. This is to allow constructors to be called for 
subclasses of the classes in the Smoke library.
* Attempt to allow subclassing by implementing the call() method to trap calls
like 'QWidget(this, parent);' in constructor functions. Not sure if it is 
really working, but it is a start.

2009-10-06  Richard Dale  <richard.j.dale@gmail.com>

* Added a QtScriptSmoke::constructCopy() method for when a C++ instance being
marshalled needs to be copied
* Add a m_classId instance variable to the QtScriptSmoke::MetaObject class
* Use the same trick of storing the name of a function in the data() of a 
Function object for static method calls as for instance method calls. Add a
classId() accessor method to the QtScriptSmoke::MetaObject class so that the
classId for a static method call can be obtained from the thisObject() by the
new callSmokeStaticMethod() function.

2009-10-05  Richard Dale  <richard.j.dale@gmail.com>

* Fixed off by one error in the virtual method override argument marshalling
* Unconditionally return false from QtScriptSmokeBinding::callMethod() until we
fix subclassing and the test for whether a virtual method has been overriden
* Use 'QtScriptSmoke' as a namespace as it's the name of the project, and 
rename the QtScriptSmoke class as RunQtScriptSmoke.
* Added QtScriptSmoke::resolveMethod() to resolve the QtScript function call
with methods in the Smoke lib matching the name and argument types.
* Change the QtScript:: namespace to QtScriptSmoke:: and put everything in that
* Rename StaticClass as QtScriptSmoke::MetaObject and ImplementationClass as 
QtScriptSmoke::Object
* Rename the StaticClass.h and .cpp files as metaobject.h and .cpp, and the 
ImplementationClass.h and .cpp as object.h and .cpp

2009-10-04  Richard Dale  <richard.j.dale@gmail.com>

* The marshalling of C++ instances to QScriptValues is now working. It is
possible to obtain a QSize instance via dialog.size() in the example script
and then call width() on the returned QSize.
* The Marshall::var() method now returns a 'QScriptValue *' rather than a value.

2009-10-03  Richard Dale  <richard.j.dale@gmail.com>

* Method calls are now working via QtScript::MethodCall and the Smoke 
marshalling framework is working. So the basics are looking pretty good, just
the overloaded method resolution code needs finishing
* The virtual method overriding code is quite close to working, and we just 
need a way to determine if a method has been overloaded in QtScript, which is
probably obvious, but needs investigating.

2009-10-02  Richard Dale  <richard.j.dale@gmail.com>

* Added code to call an overriden virtual method. Not working yet, not sure how
to tell if the method has been overriden or not.
* Added some debugging enum values to control debugging areas, and switch 
debugging on
* Unmap the pointer for a C++ instance which has been deleted
 
2009-09-29  Richard Dale  <richard.j.dale@gmail.com>

* Added a global hash to map C++ pointers onto the corresponding QScriptValues

2009-09-28  Richard Dale  <richard.j.dale@gmail.com>

* Added some more marshallers, now complete all primitve types and strings.
* Timed startup with creating 500 'StaticClass' classes, and found the time
taken to be negligable. Left the code in qtscript-smoke.cpp commented out, so
that Ian can try.

2009-09-27  Richard Dale  <richard.j.dale@gmail.com>

* Add virtual method call marshallers
* Began some implementation of the marshalling code for QScript to the Smoke
stack

2009-09-24  Richard Dale  <richard.j.dale@gmail.com>

* Added a marshalling framework based on the PerlQt design. It doesn't work
yet though.
* Added a ChangeLog to the project, now it seems to be a bit more than a 
prototype