2010-01-27  Richard Dale  <richard.j.dale@gmail.com>

* Constructors for nesting classes such as KParts::MainWindow were not working
* If a nested class didn't have an outer class in the Smoke library, it wasn't
being initialize correctly. For instance, there is no 'KParts' smoke class.
* The code to handle argument type conversions based on 'operator Foobar()'
style methods now works. However, there is a crash when the destructor for the
temporary item is called in MethodCall::ArgumentTypeConversion
* Make JSmoke::MetaObject ignore standard methods such as valueOf(), and not
try and look them up in the Smoke libs.

2010-01-26  Richard Dale  <richard.j.dale@gmail.com>

* #ifdef out the Q_PROPERTY getting/setting when building with Qt 4.6.0. It 
doesn't work because returning QScriptValue::PropertyGetter or 
QScriptValue::PropertySetter from QScriptClass::propertyFlags() has no effect.
With Qt 4.5.2 it meant that the following call to QScriptClass::property() 
would be expected to return functions to get or set a property. 
* With Qt 4.6.0, the code only expects to call QScriptClass::property() or 
QScriptClass::setProperty() to change a property. This can't be made to work
JavaScript classes which are subclasses, because the QScriptValue passed to 
these two methods is the prototype instance, and not the actual value whose
properties need to be changed. It will only work if the JavaScript value is 
an instance of a class in the Smoke libraries such as 'QWidget', and not 
something like 'MyWidget', a subclass of QWidget.

2010-01-25  Richard Dale  <richard.j.dale@gmail.com>

* The overloaded method resolution is now greatly improved:
* Added an 'inheritanceDistance()' method which returns the distance between
two classes in the inheritance heirarchy. For instance, QObject to QObject is
0, QWidget to QObject is 1, and QPushButton to QObject is 3.
* The overloaded method resolution now handles C++ implicit type conversions
when matching method arguments. For instance, if a Boolean is passed as an 
argument to a method expecting a QVariant, a temporary QVariant is constructed
in the MethodCall class for the argument, and passed to the method being
called. 
* The approach is to first match the methods found from the munged method
signatures against the actual JavaScript arguments as before. If that fails,
then the overloaded method resolution goes into 'implicitTypeConversionMode'
where it will see if any of the target argument types which are classes can be
constructed from the JavaScript argument, either with a constructor or with a
'operator Foobar()' type conversion. A QVector of method ids is now passed to
the MethodCall class constructor, where the zeroth entry is the main method to
be called and the optional following entries are either 'NullModuleIndex' to 
mean that no type conversion is needed for that argument, or they are they are
the method id of a suitable constructor or operator method to handle the type
conversion for a particular argument.
* The Qt.Debug.MethodMatches trace option shows any type conversion methods
which have been matched.

2010-01-21  Richard Dale  <richard.j.dale@gmail.com>

* Add marshallers for references and pointers primitive types, such as 'bool*',
'bool&', 'int&' and so on. For non-const references, the primitive should be
passed as a single element JavaScript array, so that the value in the first
element can be updated after the method call.
* Make the 'jsmokeapi' tool show references and pointers to primitve types as
single element arrays.

2010-01-20  Richard Dale  <richard.j.dale@gmail.com>

* Add a '-c' option to the jsmokeapi tool to just show classnames

2010-01-17  Richard Dale  <richard.j.dale@gmail.com>

* Added a 'jsmokeapi' command line tool for introspecting the JSmoke api
Example usage:

     $ jsmokeapi -r qtgui -m click -p QPushButton
     slot QAbstractButton.click()
     signal QAbstractButton.clicked()
     signal QAbstractButton.clicked(bool)

This looks for all methods matching the pattern 'click' in the QPushButton
class and its parents. The '-r qtgui' options opens the libsmokeqtgui library.
* Improved to methodToString() method

2010-01-15  Richard Dale  <richard.j.dale@gmail.com>

* Added a QtScript array value to 'char**' marshaller

2010-01-13  Richard Dale  <richard.j.dale@gmail.com>

* Added a 'jsmokekapp' binary for running KDE scripts. It loads the kdecore,
kdeui and kio KDE modules. If it is given an argument of the form 
program_name/qtscript-name, it uses KComponentData to find the location of the
script. The KDE application directory is then added to the load path so that any
other scripts in that directory will be found via include statements.
* Removed the 'interactive' option from the jsmokeapp family as it isn't much
use without using GNU readline. Also removed 'README.TXT' for the tools as it
isn't a very good idea for holding applicaton usage text.

2010-01-12  Richard Dale  <richard.j.dale@gmail.com>

* Removed the DEF_CONTAINER_MARSHALLER() macro as it isn't needed because a
marshaller can be defined in the tables of type handlers with a template 
argument like this:

    { "QList<QByteArray>", marshall_Container<QList<QByteArray> > },                                                                                                  

2010-01-07  Richard Dale  <richard.j.dale@gmail.com>

* Methods in the 'QGlobalSpace' global namespace classes were not being looked 
up correctly

2010-01-04  Richard Dale  <richard.j.dale@gmail.com>

* Changed the namespace in the QtScript plugin C function names from 'org_kde'
to 'jsmoke'

2010-01-03  Richard Dale  <richard.j.dale@gmail.com>

* Added some marshallers for lists of QPairs, QHashs and QMaps.

2010-01-01  Richard Dale  <richard.j.dale@gmail.com>

* Added qScriptSmokeRegisterHashMetaType() for handling marshalling QHashs
and QMaps.
* Added qScriptSmokeRegisterPairSequenceMetaType() for handling lists of QPairs
* A metatype can be declared for a type containing a single comma, for example:
    Q_DECLARE_METATYPE2(QList<QPair<QByteArray,QByteArray> >)       

2009-12-30  Richard Dale  <richard.j.dale@gmail.com>

* Add some marshallers for lists of KSycocaEntry types, such as KService.

2009-12-29  Richard Dale  <richard.j.dale@gmail.com>

* When a C++ instance created on the C++ side is wrapped, if there is a type
resolver function for the class then it is used to get a more accurate class.
For instance, when a QEvent is passed to QWidget.event() it is resolved to a
QMouseEvent, QPaintEvent etc according to the QEvent.type().

2009-12-27  Richard Dale  <richard.j.dale@gmail.com>

Nest the MethodCallReturnValue and VirtualMethodCallReturnValue classes within
MethodCall and VirtualMethodCall respectively

2009-12-19  Richard Dale  <richard.j.dale@gmail.com>

* Changed the namespace for the project from QtScriptSmoke to JSmoke
* Added some more plugins for Soprano, Nepomuk, Attica, Phonon and QImageBlitz
* Added the script used to generate the plugin code in 
scripts/jsmoke_plugin_template.rb

2009-12-14  Richard Dale  <richard.j.dale@gmail.com>

* Fixed bug in the way prototypes were being set up for newly created 
instances. This meant the a custom method QVariant.valueOf() was replacing the
one in the global object (oops!), but now it only is called for QVariant 
instances. It is now possible to correctly add custom methods to any class,
which is quite important.
* Used some of the improved methods in the smoke.h header to make the code 
tidier.
* Add a 'qs.system.argv' property with QCoreApplication::arguments(), to match
the existing 'qt.system.env' property.
* Added some code to resolve classnames better. For instance, if an argument to
a method is 'QEvent', then the type of the event can be used to get a more
accurate class name. Similary the QMetaObject::className() can be used for 
QObjects. Needs a bit more work to complete though, so not being used yet.
* Added missing source in tools/jsmokeapp/src - thanks to Simon St James for 
pointing out they were missing.
* Added a FindQtSmoke.cmake script in cmake/modules and some initial support
for finding the smoke libs and include files. SMOKE_QTCORE_LIBRARY and 
SMOKE_INCLUDE_DIR are set, but the rest of the smoke libs should added too.

2009-12-08  Richard Dale  <richard.j.dale@gmail.com>

* Added a QtMultimedia plugin, and plugins for most of the kdelibs libraries
* Made the code work with Qt 4.6 more or less. Setting QObject properties still
doesn't work though as the behaviour of the QScriptClass::property() method
seems to have changed.
* The Global::initializeClasses() method was wrongly including classes that
were external to the current module, and they are now skipped.

2009-12-04  Richard Dale  <richard.j.dale@gmail.com>

* Improved the debug logging for the Qt.Debug.MethodMatches and Qt.Debug.Calls
options by adding the filename and line number.

2009-12-03  Richard Dale  <richard.j.dale@gmail.com>

* Added plugins for the QtSql, QtXml, QtXmlPatterns, QtUiTools and QtOpenGL 
modules

2009-12-02  Richard Dale  <richard.j.dale@gmail.com>

* Added plugins for the QtDBus, QtSvg and QtWebKit modules. The current version
of the QtWebKit smoke library in kdebindings needs a small patch to work with
the plugin - the patch is in the qtwebkit directory.
* Renamed the 'qsexec' tool as 'jsmokeapp' and made it load the jsmoke.qtcore
and jsmoke.qtgui plugins. Added another tool 'jsmokecoreapp' which just loads
the jsmoke.qtcore plugin.
* Use atexit() to trap app termination, and then call terminate() and wait() 
on the finalizer thread to avoid 'QThread: Destroyed while thread is still 
running' messages.

2009-12-01  Richard Dale  <richard.j.dale@gmail.com>

* Allow the plugin initialization functions to be called more than once, but
do QScriptEngine specific initialization after the first time.
* Add the sweepScriptValues() method to the FinalizationThread class
* Improved the Global::wrapInstance() method

2009-11-30  Richard Dale  <richard.j.dale@gmail.com>

* The project has been split up into a shared library called 'libjsmokeruntime'
and qscript plugins called 'jsmokeqtcore', 'jsmokegui' etc. The plugins are 
under the 'bindings' directory.
* The qsexec tool create a QCoreApplication which doesn't work for GUI apps,
and so change it to create a QApplication instead.
* Added a finalizer thread that periodically sweeps through the scriptValues
hash (every 3 seconds at present), and clears out any where isValid() is false.

2009-11-28  Richard Dale  <richard.j.dale@gmail.com>

* Added the 'qsexec' command line tool for running QtScript programs from the
Qt Labs QtScript bindings project.

2009-11-20  Richard Dale  <richard.j.dale@gmail.com>

* If a method is overloaded only on const-ness, prefer the non-const version
* Handle arg types of 'char*', 'unsigned char*' and QChar as JavaScript strings

2009-11-09  Richard Dale  <richard.j.dale@gmail.com>

* If the QVariant_valueOf() function fails it should return the thisObject for
the current context.

2009-11-06  Richard Dale  <richard.j.dale@gmail.com>

* The binding for virtual method callbacks for the QtNetwork module wasn't
being initialized correctly
* When a C++ type was being marhalled to a QtScript value and wrapped, the
smoke library for the class of the item was being set to the smoke module of
the method being called, rather than the smoke module of the item itself.
* Added some more examples.
* Added a 'bool*' marshaller, however it value is still immutable and doesn't
get changed after the method call.

2009-11-05  Richard Dale  <richard.j.dale@gmail.com>

* Rename virtual method callbacks which are also properties, such as sizeHint()
and call them getSizeHint() etc instead.
* Added the CalendarWidget.qs example
* Added QVariant.valueOf() which converts a QVariant to the value it contains.
At the moment this is wrongly called for all Smoke classes, and not just
QVariant though, and so there is a but to be fixed in setting up the prototype
chain.
* Added QVariant.fromValue() to create a QVariant from types such as QColor
which don't have a constructors.
* Fixed bug in marshalling JavaScript dates to Qt C++ date types
* Create a prototype instance for the MetaData QScriptClass classes.
* Added the CollidingMice.qs example

2009-11-02  Richard Dale  <richard.j.dale@gmail.com>

* Setting QObject properties now works correctly. The initial approach of using
QScriptClass::setProperty() didn't work for classes which were subclassed.
Instead SmokeQObject::propertyFlags() returns QScriptValue::PropertyGetter and 
QScriptValue::PropertySettergetter for QObject properties, then getter and
setter functions are returned by SmokeQObject::property().
* Fixed bug when calling methods as the smoke module corresponding to the
instance was being passed, and not the smoke module corresponding to the method
call.
* When resolving overloaded methods with enum arguments, make 'uint' types the
second most important after an actual match on the enum type itself.
* Added support for the HasInstance extension so that 'instanceof' now works 
correctly with the smoke classes. For instance:

    print(dialog instanceof MyWidget); // returns true
    print(dialog instanceof QWidget); // returns true
    print(dialog instanceof Object); // returns true

Will all return true when MyWidget is a subclass of QWidget
* When the full signature of a signal is specified, such as 'activated(int)' 
is it used to find a match.
* Added the BasicDrawing.qs example, which runs fine, but doesn't yet draw 
anything.

2009-10-30  Richard Dale  <richard.j.dale@gmail.com>

* Added support for nested classes such as QPainterPath::Element
* Implemented the Qt.Debug.Calls option to trace method calls
* The Qt.Debug.Ambiguous trace option has been rename Qt.Debug.MethodMatches
* Added a default toString() method which show instances like this in the method
call tracing:

Trace: QPen.QPen([object QBrush:0x08ec3ef0], 1, 1, 0, 0) => [object QPen:0x08ecab58]

* Added some missing QList and QVector marshallers for nested classes

2009-10-29  Richard Dale  <richard.j.dale@gmail.com>

* Added various sort of debug tracing that can be turned on from scripts by
setting the Qt.Debug.trace property. For example:

    Qt.Debug.trace = Qt.Debug.Properties | Qt.Debug.GC;
    var path = QDir.currentPath();
    Qt.Debug.trace = Qt.Debug.None;

Will turn on property and garbage collection tracing before method call, and 
setting the trace property to 'Qt.Debug.None' turns everything off. The options
can be combined by or'ing them together. Possible values are:

    Qt.Debug.None
    Qt.Debug.Ambiguous
    Qt.Debug.Properties
    Qt.Debug.Calls
    Qt.Debug.GC
    Qt.Debug.Virtual

2009-10-28  Richard Dale  <richard.j.dale@gmail.com>

* Use individual smoke libraries for qtcore, qtgui and qtnetwork instead of the
single qt smoke file with everything. The next thing to do is to split up the 
project into individual qtscript plugins for each smoke library.
* A javascript regular expression can be provided as an argument everywhere a
QRegExp is expected.

2009-10-27  Richard Dale  <richard.j.dale@gmail.com>

* Enums are now marshalled to and from Qt.Enum instances. The Qt.Enum has
'value' and 'type' properties. The 'type' property allows the name of the enum
type to be used for resolving methods overloaded on the enum types of their 
arguments.
* If there is a C++ toString() method use that instead of the built-in 
JavaScript one.

2009-10-26  Richard Dale  <richard.j.dale@gmail.com>

* Fixed bug when methods were being looked up in the 'QGlobalSpace' global
space.
* Added the DigitalClock example

2009-10-25  Richard Dale  <richard.j.dale@gmail.com>

* Added reading QObject properties. Setting QObject properties still doesn't 
work.

2009-10-16  Richard Dale  <richard.j.dale@gmail.com>

* Added a QScriptClass called QtScriptSmoke::SmokeQObject to handle QObjects,
and intercept access to signals, QObject set and get properties. Instances of
QObjects are held in QtScriptSmoke::SmokeQObject::Instance, which has a 
QScriptValue created with newQObject(), containing the QObject C++ instance.

2009-10-15  Richard Dale  <richard.j.dale@gmail.com>

* Improved the debugging logging for querying properties
* Added the Wiggly.qs example
* Rename Debug::Property as Debug::Properties

2009-10-14  Richard Dale  <richard.j.dale@gmail.com>

* Changed QScriptSmoke::Instance to be nested within QScriptSmoke::Object
* Fixed bugs in constructCopy() and it now works
* Attempted to return a signal handler when a signal name property was 
referenced by wrapping a Smoke QObject instance with 
QScriptEngine::newQObject(), and then obtaining the property from it. However,
although there are no runtime errors the target slot is never called.
* It seems the above problem is caused by only one of these two syntaxes work;

    timer.timeout.connect(this, "update()");   // Doesn't work
    timer.timeout.connect(this, this.update);  // Works

And in fact QtScript style connect() call do actually work. At the moment 
everytime a method is called on a QObject, it checks whether or not it is a
signal by looking in the QMetaObject. Maybe it would be better to find all the
signal names when a QObject is first instantiated and add all the signal 
functions as properties. Rather than just QtScriptSmoke::Object, there should
a QtScriptSmoke::QObject class as well, that held its QObject instance wrapped
with a engine->newQObject() call in a nested QObject::Instance class.

2009-10-13  Richard Dale  <richard.j.dale@gmail.com>

* Added a convenience method for wrapping an existing C++ instance, 
Global::wrapInstance() and wrapped 'qApp' as a global object property with it.

2009-10-12  Richard Dale  <richard.j.dale@gmail.com>

* Added more marshallers
* Amend the AnalogClock example to use SLOT() and SIGNAL() functions so that it
works for now, until the more QtScript-like slot/signal handling is implemented.

2009-10-11  Richard Dale  <richard.j.dale@gmail.com>

* Added a DEF_CONTAINER_MARSHALLER macro and defined a lot of QList and QVector
types to be marshalled

2009-10-10  Richard Dale  <richard.j.dale@gmail.com>

* The AnalogClock.qs example nearly works! Remaining problems are slots/signals
not being implemented, and 'this.height' not working as it needs to be 
'this.height()'. It isn't obvious how function calls and attribute accesses 
should be distinguished in QScriptClass in order to fix the attribute problem.
For signals/slots it might be possible to reuse the existing implementation,
but it seem that it expects instances to be embedded inside QVariants and 
wouldn't work with a QScriptSmoke::Instance embedded inside a QVariant.
* Fixed class loading problem where the Qt class and associated enums wasn't
being loaded at startup
* Improved overloaded method resolution so that it takes into account instances
of a class being the same or subclasses
* Moved all the type registration code into handlers.cpp

2009-10-09  Richard Dale  <richard.j.dale@gmail.com>

* Improve error messages over 'seg fault' when a method isn't found in the 
Smoke lib, or an overloaded method isn't resolved
* Allow a QtScript Date to be passed for any QDate, QDateTime or QDate arg
* Load all the classes from a Smoke lib at startup, as all the 'include()'
statements make the scripts look a bit clunky IMHO. But we should compare the
time and memory used to make sure it isn't a problem.
* Add an optional arguement to allow a script name to be given so that more 
than just '../test.qs' can be run. Create a test subdirectory for test scripts.
* Added some debug logging for accessing the C++ pointer to QScriptValue map
* Added a qScriptSmokeRegisterSequenceMetaType() function based on 
qScriptRegisterSequenceMetaType() but using marshaller and demarshaller 
functions that work with QScriptValues wrapped as smoke instances.
* Added a test marshaller for QVector<QPoint> to try the sequence marshaller,
and it does seem to do something useful. Where the metatypes should be declared
and so on needs more thought though.

2009-10-08  Richard Dale  <richard.j.dale@gmail.com>

* Virtual method overrides are now working. Added propertyFlags() methods to
QtScriptSmoke::MetaObject and Object classes that returns 
QScriptValue::ReadOnly. This makes it possible to distiguish between custom
qtscript functions and built in smoke methods.
* If an enum, such as QPainter.Antialiasing, is referenced, then return the
value directly, rather than returning a function to be evaluated.
* Once an argument type that can't be marshalled has been found, abandon the 
method call and throw an exception
* If an argument type has 'QList' or 'QVector' in it, assume it will match a
QtScript Array

2009-10-07  Richard Dale  <richard.j.dale@gmail.com>

* Argument and return types that can't be handled are no longer fatal, but are
QScript TypeError exceptions instead
* Add a singleton QtScriptSmoke::Global::Object which is the QScriptClass of 
Smoke instances
* Don't change the 'thisObject' in the MethodCall when a new instance has been
constructed, but assume a correct one has been set up in the context before, and
passed to the MethodCall. This is to allow constructors to be called for 
subclasses of the classes in the Smoke library.
* Attempt to allow subclassing by implementing the call() method to trap calls
like 'QWidget(this, parent);' in constructor functions. Not sure if it is 
really working, but it is a start.

2009-10-06  Richard Dale  <richard.j.dale@gmail.com>

* Added a QtScriptSmoke::constructCopy() method for when a C++ instance being
marshalled needs to be copied
* Add a m_classId instance variable to the QtScriptSmoke::MetaObject class
* Use the same trick of storing the name of a function in the data() of a 
Function object for static method calls as for instance method calls. Add a
classId() accessor method to the QtScriptSmoke::MetaObject class so that the
classId for a static method call can be obtained from the thisObject() by the
new callSmokeStaticMethod() function.

2009-10-05  Richard Dale  <richard.j.dale@gmail.com>

* Fixed off by one error in the virtual method override argument marshalling
* Unconditionally return false from QtScriptSmokeBinding::callMethod() until we
fix subclassing and the test for whether a virtual method has been overriden
* Use 'QtScriptSmoke' as a namespace as it's the name of the project, and 
rename the QtScriptSmoke class as RunQtScriptSmoke.
* Added QtScriptSmoke::resolveMethod() to resolve the QtScript function call
with methods in the Smoke lib matching the name and argument types.
* Change the QtScript:: namespace to QtScriptSmoke:: and put everything in that
* Rename StaticClass as QtScriptSmoke::MetaObject and ImplementationClass as 
QtScriptSmoke::Object
* Rename the StaticClass.h and .cpp files as metaobject.h and .cpp, and the 
ImplementationClass.h and .cpp as object.h and .cpp

2009-10-04  Richard Dale  <richard.j.dale@gmail.com>

* The marshalling of C++ instances to QScriptValues is now working. It is
possible to obtain a QSize instance via dialog.size() in the example script
and then call width() on the returned QSize.
* The Marshall::var() method now returns a 'QScriptValue *' rather than a value.

2009-10-03  Richard Dale  <richard.j.dale@gmail.com>

* Method calls are now working via QtScript::MethodCall and the Smoke 
marshalling framework is working. So the basics are looking pretty good, just
the overloaded method resolution code needs finishing
* The virtual method overriding code is quite close to working, and we just 
need a way to determine if a method has been overloaded in QtScript, which is
probably obvious, but needs investigating.

2009-10-02  Richard Dale  <richard.j.dale@gmail.com>

* Added code to call an overriden virtual method. Not working yet, not sure how
to tell if the method has been overriden or not.
* Added some debugging enum values to control debugging areas, and switch 
debugging on
* Unmap the pointer for a C++ instance which has been deleted
 
2009-09-29  Richard Dale  <richard.j.dale@gmail.com>

* Added a global hash to map C++ pointers onto the corresponding QScriptValues

2009-09-28  Richard Dale  <richard.j.dale@gmail.com>

* Added some more marshallers, now complete all primitve types and strings.
* Timed startup with creating 500 'StaticClass' classes, and found the time
taken to be negligable. Left the code in qtscript-smoke.cpp commented out, so
that Ian can try.

2009-09-27  Richard Dale  <richard.j.dale@gmail.com>

* Add virtual method call marshallers
* Began some implementation of the marshalling code for QScript to the Smoke
stack

2009-09-24  Richard Dale  <richard.j.dale@gmail.com>

* Added a marshalling framework based on the PerlQt design. It doesn't work
yet though.
* Added a ChangeLog to the project, now it seems to be a bit more than a 
prototype